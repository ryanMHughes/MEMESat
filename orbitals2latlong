tic
% Author:Ryan Hughes
% Email: rh39658@uga.edu
% FOR: UGA Small Satellite Research Lab
% WORKS: Returns latitude, longitude, and altitude at the beginning of downlink interval, 
% when given a set of orbital parameters.   

% Defining start, end, timestep

startTime = datetime(2021,7,15,0,0,0);
stopTime = startTime + days(7);
sampleTime = 10; %seconds

% Creating simulation at specified times

sc = satelliteScenario(startTime,stopTime,sampleTime);

% Creating UGA GS

minElevationAngle = 20; % Degrees above horizon due to hardware limitations
name = 'Ground_Station';
lat = 33.939593;
long = -83.374889;
UGA = groundStation(sc, lat, long, 'Name', name, "MinElevationAngle", ...
    minElevationAngle);

% Defining orbital parameters and creating MEMESat

semiMajorAxis = 6778100; % Meters, per MEMESat Link Budget document
eccentricity = 0;
inclination = 51.64;
rightAscentionOfAscendingNode = 316.77;
argumentOfPeriapsis = 357.1; %Argument of perigee per MEMESat Link Budget Document
trueAnomaly = 2.97; %True Anomaly per MEMESat Link Budget Document (assuming same because orbit is circular)

name = 'MEMESat';
memeSat = satellite(sc, semiMajorAxis, eccentricity, inclination, ...
    rightAscentionOfAscendingNode, argumentOfPeriapsis, trueAnomaly, ...
    'Name', name);
    
% Finding downlink intervals

ac = access(memeSat, UGA);
intervals = accessIntervals(ac)

% Finding lat, long, altitude of MEMESat during a downlink interval\
time = intervals{1,4};

[pos] = states(memeSat, time, "CoordinateFrame", "geographic");

lat = pos(1)
long = pos(2)
alt = pos(3)


toc
